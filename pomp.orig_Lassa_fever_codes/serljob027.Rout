
R version 4.1.2 (2021-11-01) -- "Bird Hippie"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-redhat-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

During startup - Warning message:
Setting LC_CTYPE failed, using "C" 
> Npar<-2000
> require(pomp.orig)
Loading required package: pomp.orig
Loading required package: nlme
> 
> Args <- commandArgs(trailingOnly=TRUE)
> print(Args)
[1] "27"
> ci<-eval(parse(text = Args))
> nreps <- 1
> #imagefile <- sprintf("serljob%3.3d.rda", ci) 
> id <- 'fit1f1_lassa'
> mpfile <- 'mp_lassa.csv'
> bestfile <- sprintf("best_lassa%3.3d.csv", ci)  
> mlefile <- sprintf("mle_lassa%3.3d.rda", ci) 
> filtnames <- c(
+ 'BSH','BEH','BIH','BEQ','BIQ','BH','BR','BC',
+ 'CSH','CEH','CIH','CEQ','CIQ','CH','CR','CC',
+ 'DSH','DEH','DIH','DEQ','DIQ','DH','DR','DC'
+ )
> #pfilt<-TRUE
> pfilt<-FALSE
> 
> 
> x<-read.csv('nigeria_LHF.csv',head=1)[,c(1,3,5,2)]
> lassacases<-as.data.frame(x[,-4])
> names(lassacases)<-c('B','C','D')
> lassacases$time<-x[,4]
> print(lassacases)
    B  C  D     time
1   1  4  7 2016.843
2   0  2  6 2016.862
3   0  5  4 2016.882
4   2  2  7 2016.901
5   4  8 13 2016.920
6   7  5  7 2016.939
7   9  1 12 2016.958
8   4  8 14 2016.977
9   5  4 22 2016.997
10  3 10 25 2017.019
11  5 26 44 2017.038
12 10 46 76 2017.057
13  8 35 80 2017.077
14 11 37 65 2017.096
15 11 43 38 2017.115
16  8 69 24 2017.134
17 11 56 22 2017.153
18 20 37 39 2017.172
19 11 13 45 2017.192
20  4  9 26 2017.211
21  5 16 16 2017.230
22 15  7 17 2017.249
23  1  8 11 2017.268
24 10  5  4 2017.287
25  3  1  7 2017.307
26  6  4  8 2017.326
27  6  3 NA 2017.345
28  4  5 NA 2017.364
29  5  3 NA 2017.383
30  0  0 NA 2017.402
31  2  1 NA 2017.422
> x<-read.csv('precip_nigeria.csv')
> xout<-(1:1156)/365.25+2016
> precip<-approx(x[,1],y=smooth(x[,7]),xout)$y
> temp1<-precip[which(xout>2016.34-1/12 & xout<2016.931)]
> temp2<-precip[which(xout>2017.34-1/12 & xout<2017.931)]
> temp3<-precip[which(xout>2018.34-1/12 & xout<2018.931)]
> 
> 
> #print(lassacases)
> 
> parameters <- read.csv(file=mpfile,row.names=1,as.is=TRUE)
> districts <- names(parameters)[-c(1,2)]
> districts <- districts[ifelse(ci %% 10 ==0, 10, ci%%10)] 
> 
> print(districts)
[1] "S.6"
> #print(cbind(rownames(parameters),parameters[,districts]))
> ifelse(pfilt==TRUE, test.sigma <- parameters$sd/1e20, test.sigma <- parameters$sd)
[1] 0
> names(test.sigma) <- rownames(parameters)
> 
> source('lassamodel.R')
> 
> 
> parameters[grep('log.muv',rownames(parameters)),'type']<-'fixed'
> n<-as.numeric(parameters['nm',districts])
> parameters[grep('log.muv',rownames(parameters)),'type'][1:n]<-'par'
> parameters[grep('log.muv',rownames(parameters)),districts][-c(1:n)]<-1
> 
> 
> print(parameters[,c('type',districts)])
          type          S.6
beta1    fixed 1.000000e+00
beta2    fixed 1.000000e+00
beta3    fixed 1.000000e+00
muh      fixed 1.825000e-02
sigma1   fixed 1.898000e+02
gamma1   fixed 3.650000e+01
tau1     fixed 1.887050e+01
alpha1   fixed 8.395000e+01
delta1   fixed 7.665000e+01
sigma2   fixed 1.496500e+02
tau2     fixed 1.887050e+01
alpha2   fixed 7.300000e+01
delta2   fixed 7.300000e+01
tau3     fixed 1.887050e+01
delta3   fixed 6.935000e+01
xi       fixed 2.445500e+00
rho      fixed 1.000000e-01
nm       fixed 7.000000e+00
log.muv    par 4.935735e+00
log.muv1   par 5.490485e+00
log.muv2   par 6.628223e+00
log.muv3   par 5.370612e+00
log.muv4   par 2.219008e-01
log.muv5   par 4.347890e+00
log.muv6   par 2.311841e-01
log.muv7 fixed 1.000000e+00
log.muv8 fixed 1.000000e+00
log.muv9 fixed 1.000000e+00
bmuv     fixed 1.000000e+00
cmuv       par 6.797077e+01
tau        par 4.522225e-02
BSH.0      ivp 5.557322e-02
BEH.0      ivp 2.983433e-08
BIH.0      ivp 2.059173e-08
BEQ.0      ivp 0.000000e+00
BIQ.0      ivp 0.000000e+00
BH.0       ivp 0.000000e+00
BR.0       ivp 9.444267e-01
CSH.0      ivp 5.819055e-01
CEH.0      ivp 6.679437e-08
CIH.0      ivp 2.498071e-08
CEQ.0      ivp 0.000000e+00
CIQ.0      ivp 0.000000e+00
CH.0       ivp 0.000000e+00
CR.0       ivp 4.180944e-01
DSH.0      ivp 7.797163e-01
DEH.0      ivp 2.739481e-08
DIH.0      ivp 8.115372e-08
DEQ.0      ivp 0.000000e+00
DIQ.0      ivp 0.000000e+00
DH.0       ivp 0.000000e+00
DR.0       ivp 2.202836e-01
pop      fixed 5.000000e+07
susc.ini fixed 3.333333e-01
infe.ini fixed 1.000000e+00
t0       fixed 2.890000e-01
> 
> ndists <- length(districts)
> njobs <- nreps*ndists
> #seeds <- lavaseed(n=njobs)
> seeds<-ceiling(10^runif(n=njobs,min=7,max=9))
> tic<-Sys.time()
> joblist <- vector(mode='list',length=njobs)
> j <- 0
> for (d in districts) {
+   mle <- district.pomp(lassacases,temp1,temp2,temp3,rownames(parameters),parameters$type,parameters['nm',d])
+   test.params <- parameters[[d]]
+   names(test.params) <- rownames(parameters)
+   theta.x <- as.matrix(particles(mle,Np=nreps,center=par.trans(test.params),sd=test.sigma)[rownames(parameters),])
+   for (r in 1:nreps) {
+     j <- j+1
+     x <- theta.x[,r]
+     names(x) <- rownames(theta.x)
+ 	print(names(x))
+     joblist[[j]] <- list(
+                          mle=mle,
+                          district=d,
+                          seed=seeds[j],
+                          theta=x,
+                          sigma=test.sigma,
+                          ivpnames= rownames(parameters)[parameters$type=='ivp'],
+                          estnames=rownames(parameters)[parameters$type=='par'],
+                          filtnames=filtnames
+                          )
+   }
+ }
 [1] "beta1"    "beta2"    "beta3"    "muh"      "sigma1"   "gamma1"  
 [7] "tau1"     "alpha1"   "delta1"   "sigma2"   "tau2"     "alpha2"  
[13] "delta2"   "tau3"     "delta3"   "xi"       "rho"      "nm"      
[19] "log.muv"  "log.muv1" "log.muv2" "log.muv3" "log.muv4" "log.muv5"
[25] "log.muv6" "log.muv7" "log.muv8" "log.muv9" "bmuv"     "cmuv"    
[31] "tau"      "BSH.0"    "BEH.0"    "BIH.0"    "BEQ.0"    "BIQ.0"   
[37] "BH.0"     "BR.0"     "CSH.0"    "CEH.0"    "CIH.0"    "CEQ.0"   
[43] "CIQ.0"    "CH.0"     "CR.0"     "DSH.0"    "DEH.0"    "DIH.0"   
[49] "DEQ.0"    "DIQ.0"    "DH.0"     "DR.0"     "pop"      "susc.ini"
[55] "infe.ini" "t0"      
> dyn.load('lassamodel.so')
> done <- 0
> for(i in 1:nreps){
+ joblist[[i]] <-
+ with(joblist[[i]],
+                     {
+                       save.seed <- .Random.seed
+                       set.seed(seed)
+                       x <- mif(
+                                mle,
+                                Nmif=1,
+                                ivps=ivpnames,
+                                pars=estnames,
+                                stvs=filtnames,
+                                alg.pars=list(Np=Npar,CC=3,T0=nrow(lassacases),cooling.factor=0.95),
+                                start=theta,
+                                rw.sd=sigma,
+                                max.fail=1000,
+                                weighted=T,
+                                warn=F
+                                )
+                       result <- list(
+                                      mle=x,
+                                      district=district,
+                                      seed=seed,
+                                      rngstate=.Random.seed
+                                      )
+                       .Random.seed <<- save.seed
+                       result
+                     }
+                     )
+ }
> 
> joblist <- joblist[!sapply(joblist,is.null)]
> #save.image(file=imagefile)
> done <- done+1
> 
> while (done < ifelse(pfilt==TRUE,1,10)) {
+ for(i in 1:nreps){
+ joblist[[i]] <-
+ with(joblist[[i]],
+                     {
+                         save.seed <- .Random.seed
+                         .Random.seed <<- rngstate
+                         if (done < 2) {
+                           x <- continue(mle,Nmif=11,weighted=T,max.fail=1000)
+                         } else {
+                           x <- continue(mle,Nmif=11,weighted=T,max.fail=1000)
+                         }
+                         result <- list(
+                                        mle=x,
+                                        district=district,
+                                        seed=seed,
+                                        rngstate=.Random.seed
+                                        )
+                         .Random.seed <<- save.seed
+                         result
+                       }
+                       )
+ }
+   joblist <- joblist[!sapply(joblist,is.null)]
+  # save.image(file=imagefile)
+   done <- done+1
+ }
> 
> for(i in 1:nreps){
+ joblist[[i]] <-
+ with(joblist[[i]],
+                     {
+                       save.seed <- .Random.seed
+                       .Random.seed <<- rngstate
+                       ff <- vector(mode='list')
+                       for (n in 1:10)
+                         ff[[n]] <- pfilter(mle,max.fail=1000)
+                       result <- list(
+                                      mle=mle,
+                                      district=district,
+                                      seed=seed,
+                                      rngstate=rngstate,
+                                      nfail=sapply(ff,function(x)x$nfail),
+                                      loglik=sapply(ff,function(x)x$loglik)
+                                      )
+                       .Random.seed <<- save.seed
+                       result
+                     },
+                     joblist=joblist
+                     )
+ }
> joblist <- joblist[!sapply(joblist,is.null)]
> #save.image(file=imagefile)
> 
> 
> x <- do.call(
+              rbind,
+              lapply(
+                     joblist,
+                     function (x) {
+                       cbind(
+                             data.frame(
+                                        district=x$district,
+                                        loglik=mean(x$loglik),
+                                        loglik.sd=sd(x$loglik),
+                                        nfail.max=max(x$nfail),
+                                        nfail.min=min(x$nfail)
+                                        ),
+                             as.data.frame(t(par.untrans(coef(x$mle))))
+                             )
+                     }
+                     )
+              )
> 
> best.ind <- tapply(1:nrow(x),x$district,function(k)k[which.max(x$loglik[k])])
> best <- x[best.ind,]
> rownames(best) <- as.character(best$district)
> best$district <- NULL
> best <- best[order(rownames(best)),]
> write.csv(best,file=bestfile)
> 
> mle <- lapply(
+               joblist[best.ind],
+               function(x)x$mle
+               )
> names(mle) <- sapply(joblist[best.ind],function(x)x$district)
> mle <- mle[order(names(mle))]
> save(list='mle',file=mlefile)
> toc <- Sys.time()
> print(toc-tic)
Time difference of 13.42565 mins
> 
> 
> dyn.unload('lassamodel.so')
> 
> 
> 
> quit()
> proc.time()
   user  system elapsed 
398.688   1.496 807.855 
